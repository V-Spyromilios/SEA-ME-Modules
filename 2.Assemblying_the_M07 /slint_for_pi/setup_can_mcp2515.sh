#!/usr/bin/env bash
# One-shot setup for MCP2515/TJA1050 on Raspberry Pi (Bookworm/legacy).
# - Enables SPI + MCP2515 overlay
# - Installs can-utils
# - Creates systemd units:
#     * can0.service       -> brings up can0 at boot (classic CAN)
#     * can-listener.service -> runs candump at boot, logs to /var/log/can/candump.log
#
# Defaults: oscillator=8 MHz, INT GPIO=25, CS=CE0, bitrate=500000, reboot at end.
# Override:  --osc 16000000  --int 23  --cs 1  --bitrate 250000  --no-reboot


# -------------------- Banner --------------------
BOLD=$(tput bold)
RESET=$(tput sgr0)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
CYAN=$(tput setaf 6)

cat <<EOF

${BOLD}${CYAN}One-shot setup for MCP2515/TJA1050 on Raspberry Pi (Bookworm/legacy)${RESET}
- Enables SPI + MCP2515 overlay
- Installs can-utils
- Creates systemd units:
    * ${YELLOW}can0.service${RESET}       -> brings up can0 at boot (classic CAN)
    * ${YELLOW}can-listener.service${RESET} -> candump at boot, logs to /var/log/can/candump.log

${BOLD}Defaults:${RESET}
  Oscillator: ${GREEN}8 MHz${RESET}
  INT GPIO : ${GREEN}25${RESET}
  CS       : ${GREEN}CE0${RESET}
  Bitrate  : ${GREEN}500000${RESET}
  Reboot   : ${GREEN}enabled${RESET}

Override with:
  ${CYAN}--osc 16000000${RESET}   ${CYAN}--int 23${RESET}   ${CYAN}--cs 1${RESET}   ${CYAN}--bitrate 250000${RESET}   ${CYAN}--no-reboot${RESET}

##
nano setup_can_mcp2515.sh     ${BOLD}# paste the script${RESET}
chmod +x setup_can_mcp2515.sh ${BOLD}# make it executable${RESET}
sudo ./setup_can_mcp2515.sh   ${BOLD}# run it ( /usr/local/bin/ )${RESET}
##


EOF



set -euo pipefail

# -------------------- Args --------------------
OSC=8000000
INT_GPIO=25
CS=0                 # 0=CE0 (spi0-0), 1=CE1 (spi0-1)
BITRATE=500000
REBOOT=1

while [[ $# -gt 0 ]]; do
  case "$1" in
    --osc)       OSC="${2}"; shift 2;;
    --int)       INT_GPIO="${2}"; shift 2;;
    --cs)        CS="${2}"; shift 2;;
    --bitrate)   BITRATE="${2}"; shift 2;;
    --no-reboot) REBOOT=0; shift;;
    -h|--help)
      echo "Usage: sudo bash $0 [--osc 8000000|16000000] [--int GPIO] [--cs 0|1] [--bitrate 500000] [--no-reboot]"
      exit 0;;
    *) echo "Unknown arg: $1" >&2; exit 1;;
  esac
done

if [[ $EUID -ne 0 ]]; then
  echo "Please run as root (sudo)." >&2
  exit 1
fi

# -------------------- Detect boot config path --------------------
BOOT_BASE=""
if mount | grep -q "/boot/firmware "; then
  BOOT_BASE="/boot/firmware"
elif [[ -d /boot/firmware ]]; then
  BOOT_BASE="/boot/firmware"
elif mount | grep -q "/boot "; then
  BOOT_BASE="/boot"
else
  echo "Cannot find /boot or /boot/firmware mount." >&2
  exit 1
fi

USERCFG="${BOOT_BASE}/usercfg.txt"
CONFIGTXT="${BOOT_BASE}/config.txt"

# Prefer usercfg.txt if available (Bookworm style); fall back to config.txt.
TARGET_CFG="$USERCFG"
if [[ ! -e "$USERCFG" && -e "$CONFIGTXT" ]]; then
  TARGET_CFG="$CONFIGTXT"
fi

echo "[i] Using boot config: $TARGET_CFG"

# -------------------- Make /boot writable --------------------
mount -o remount,rw "$BOOT_BASE" 2>/dev/null || true

# -------------------- Write overlay lines idempotently --------------------
# Remove any old lines to avoid duplicates
sed -i '/^dtparam=spi=on$/d' "$TARGET_CFG" 2>/dev/null || true
sed -i '/^dtoverlay=mcp2515,.*$/d' "$TARGET_CFG" 2>/dev/null || true

SPI_NODE="spi0-${CS}"
OVERLAY="dtoverlay=mcp2515,${SPI_NODE},interrupt=${INT_GPIO},oscillator=${OSC}"

# Ensure file exists
touch "$TARGET_CFG"

# Append fresh config
{
  echo "# === MCP2515 over SPI0 (generated by setup_can_mcp2515.sh) ==="
  echo "dtparam=spi=on"
  echo "$OVERLAY"
} >> "$TARGET_CFG"

echo "[i] Wrote:"
tail -n 3 "$TARGET_CFG" || true

# -------------------- Packages --------------------
echo "[i] Installing can-utils (and logrotate if missing)…"
apt-get update -y
DEBIAN_FRONTEND=noninteractive apt-get install -y can-utils logrotate

# -------------------- Logging directory --------------------
LOG_DIR="/var/log/can"
LOG_FILE="${LOG_DIR}/candump.log"
mkdir -p "$LOG_DIR"
touch "$LOG_FILE"
chmod 0644 "$LOG_FILE"

# Logrotate config
cat >/etc/logrotate.d/can-candump <<'EOF'
/var/log/can/candump.log {
  daily
  rotate 7
  compress
  missingok
  notifempty
  copytruncate
}
EOF

# Detect absolute path to ip (for systemd ExecStart/Stop)
IP_BIN="$(command -v ip || true)"
if [[ -z "${IP_BIN}" ]]; then
  echo "ip(8) not found. Install iproute2." >&2
  exit 1
fi

# -------------------- systemd units --------------------
# 1) can0.service: bring up interface at boot (wait for device to exist)
cat >/etc/systemd/system/can0.service <<EOF
[Unit]
Description=Bring up can0 (SocketCAN)
Requires=sys-subsystem-net-devices-can0.device
After=sys-subsystem-net-devices-can0.device

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=${IP_BIN} link set can0 up type can bitrate ${BITRATE}
ExecStop=${IP_BIN} link set can0 down

[Install]
WantedBy=multi-user.target
EOF

# 2) can-listener.service: candump logger (wait for can0)
cat >/etc/systemd/system/can-listener.service <<'EOF'
[Unit]
Description=SocketCAN listener (candump can0 -> /var/log/can/candump.log)
Wants=can0.service sys-subsystem-net-devices-can0.device
After=can0.service sys-subsystem-net-devices-can0.device

[Service]
Type=simple
ExecStart=/bin/sh -c '/usr/bin/candump -tz can0 >> /var/log/can/candump.log 2>&1'
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable can0.service can-listener.service

echo "[i] Enabled services:"
systemctl is-enabled can0.service || true
systemctl is-enabled can-listener.service || true

# -------------------- Summary --------------------
echo
echo "=== Summary ==="
echo " Config file : $TARGET_CFG"
echo " Overlay     : $OVERLAY"
echo " Bitrate     : ${BITRATE}"
echo " Services    : can0.service (bring-up), can-listener.service (candump)"
echo " Log file    : ${LOG_FILE}  (rotated daily, keep 7)"
echo

if [[ "$REBOOT" -eq 1 ]]; then
  echo "[i] Rebooting now to apply overlay…"
  sleep 2
  systemctl reboot
else
  echo "[i] Reboot required to apply overlay. Run: sudo reboot"
fi
